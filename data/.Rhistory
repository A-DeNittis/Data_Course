new_df[i,"MEAN"] = avg_ben # assign the average to row i (will increase by one each loop), and column "MEAN" (defined before the loop)
i = i+1 #increase counter by 1
}
View(new_df)
getwd()
write.csv(new_df, "~/Desktop/GIT_REPOSITORIES/Data_Course/instructor/Ben_Average_by_Year.csv")
plot(df$Year_Collected,df$DNA_Concentration_Katy,
xlab = "YEAR", ylab = "DNA Concentration", main = "Katy's Extractions") # add plot labels
jpeg("~/Desktop/GIT_REPOSITORIES/Data_Course/Exam_1/ZAHN_Plot1.jpeg")
plot(df$Year_Collected,df$DNA_Concentration_Katy,
xlab = "YEAR", ylab = "DNA Concentration", main = "Katy's Extractions") # add plot labels
dev.off()
jpeg("~/Desktop/GIT_REPOSITORIES/Data_Course/Exam_1/ZAHN_Plot2.jpeg")
plot(df$Year_Collected, df$DNA_Concentration_Ben,
xlab = "YEAR", ylab = "DNA Concentration", main = "Ben's Extractions") # add plot labels
dev.off()
df = read.csv("DNA_Conc_by_Extraction_Date.csv")
# take a look at column names
names(df)
View(df)
library(dplyr)
df %>%
group_by(Year_Collected) %>%
summarise(MEAN = mean(DNA_Concentration_Ben))
list.files()
read.csv("thatch_ant.csv")
dat = read.csv("thatch_ant.csv")
names(dat)
plot(x=dat$Size.class, y=dat$Mass)
plot(x=dat$Headwidth..mm., y=dat$Mass)
class(dat$Headwidth)
class(dat$Headwidth..mm.)
class(dat$Size.class)
str(dat)
as.numeric(dat$Headwidth)
unique(as.numeric(dat$Headwidth))
nums = c(1,2,3,4,5,6,7,8,9)
nums = c(1,2,3,4,5,6,7,8,9)
class(nums)
as.factor(nums)
nums_factor = as.factor(nums)
class(nums_factor)
plot(nums)
plot(nums_factor)
nums = c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums)
# convert to a factor
as.factor(nums)
nums_factor = as.factor(nums)
class(nums_factor)
#check it out
plot(nums)
plot(nums_factor)
dat$Headwidth
levels(dat$Headwidth)
complete.cases(dat)
dat = complete.cases(dat)
na.omit(dat)
# Assignment Week 3
# topics:   type conversions, factors, plot(), making a data frame from "scratch",
#           reordering,
list.files()
dat = read.csv("thatch_ant.csv")
names(dat)
#why are these plots different???
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
#check the classes of these vectors
class(dat$Headwidth..mm.)
class(dat$Size.class)
# plot() function behaves differently depending on classes of objects given to it!
# Check all classes (for each column in dat)
str(dat)
# Two of them are "Factor" ....why is the column "Headwidth" a factor? It looks numeric!
# we can try to coerce one format into another with a family of functions
#make a numeric vector
nums = c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums)
# convert to a factor
as.factor(nums)
nums_factor = as.factor(nums)
class(nums_factor)
#check it out
plot(nums)
plot(nums_factor)
# take note of how numeric vectors and factors behave differently
# back to our ant data...
dat$Headwidth
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
# I notice a couple weird ones in there: "" and "41mm"
# The "" means a missing value, basically. The "41mm" sure looks like a data entry error.
# It should probably be "41.000"
# FIND WHICH ONES HAVE "41mm"
# CONVERT THOSE TO "41.000"
# DO THE SAME FOR "", BUT CONVERT THOSE TO "NA"
na.omit(dat)
dat2=na.omit(dat)
as.factor(nums) # show in console
plot(nums)
plot(nums_factor)
dat$Headwidth
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
col1 = c("hat", "tie", "shoes", "bandana")
col2 = c(1,2,3,4)
col3 = factor(c(1,2,3,4)
)
data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3)
df1 = data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # assign to df1
df1
for(i in 1:10){
print(i)
}
for(i in levels(dat$Size.class)){
print(i)
}
for(i in levels(dat$Size.class)){
dat[dat$Size.class == i,]
}
for(i in levels(dat$Size.class)){
return(dat[dat$Size.class == i,])
}
for(i in levels(dat$Size.class)){
print(dat[dat$Size.class == i,])
}
for(i in levels(dat$Size.class)){
mean(dat[dat$Size.class == i,"Mass"])
}
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]))
}
for(i in levels(dat$Size.class)){
paste(mean(dat[dat$Size.class == i,"Mass"]), i)
}
for(i in levels(dat$Size.class)){
paste(mean(dat[dat$Size.class == i,"Mass"]), i)
}
for(i in levels(dat$Size.class)){
print(paste(mean(dat[dat$Size.class == i,"Mass"]), i))
}
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]), i)
}
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]), i)
}
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]))
}
new_vector = c()
x = 1
for(i in levels(dat$Size.class)){
new_vector[x] = mean(dat[dat$Size.class == i,"Mass"])
x = x+1 # add 1 to the counter (this will change the element of new_vector we access each loop)
}
new_vector
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label")
View(dat)
plot(dat$Headwidth..mm., dat$Mass)
plot(dat$Headwidth..mm., dat$Mass, col = dat$Colony)
dat = dat[dat$Colony == 1,]
plot(dat$Headwidth..mm., dat$Mass, col = dat$Colony)
# Assignment Week 3
# topics:   type conversions, factors, plot(), making a data frame from "scratch",
#           reordering,
list.files()
dat = read.csv("thatch_ant.csv")
names(dat)
#why are these plots different???
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
#check the classes of these vectors
class(dat$Headwidth..mm.)
class(dat$Size.class)
# plot() function behaves differently depending on classes of objects given to it!
# Check all classes (for each column in dat)
str(dat)
# Two of them are "Factor" ....why is the column "Headwidth" a factor? It looks numeric!
# we can try to coerce one format into another with a family of functions
# as.factor, as.matrix, as.data.frame, as.numeric, as.character, as.POSIXct, etc....
#make a numeric vector to play with:
nums = c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
# convert to a factor
as.factor(nums) # show in console
nums_factor = as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
#check it out
plot(nums)
plot(nums_factor)
# take note of how numeric vectors and factors behave differently in plot()
# Let's modify and save these plots. Why not!?
?plot()
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label")
?jpeg()
dev.off()
# back to our ant data...
dat$Headwidth
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
# I notice a couple weird ones in there: "" and "41mm"
# The "" means a missing value, basically. The "41mm" sure looks like a data entry error.
# It should probably be "41.000"
# FIND WHICH ONES HAVE "41mm"
# CONVERT THOSE TO "41.000"
# DO THE SAME FOR "", BUT CONVERT THOSE TO "NA"
# NOW, REMOVE ALL THE ROWS OF "dat" THAT HAVE AN "NA" VALUE
na.omit(dat)
# NOW, CONVERT THAT PESKY "Headwidth" COLUMN INTO A NUMERIC VECTOR WITHIN "dat"
# LET'S LEARN HOW TO MAKE A DATA FRAME FROM SCRATCH... WE JUST FEED IT VECTORS WITH NAMES!
# make some vectors *of equal length* (or you can pull these from existing vectors)
col1 = c("hat", "tie", "shoes", "bandana")
col2 = c(1,2,3,4)
col3 = factor(c(1,2,3,4)) # see how we can designate something as a factor
# here's the data frame command:
data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # colname = vector, colname = vector....
df1 = data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # assign to df1
df1 # look at it...note column names are what we gave it.
# Make a data frame from the first 20 rows of the ant data that only has "Colony" and "Mass"
# save it into an object called "dat3"
### for loops in R ###
#simplest example:
for(i in 1:10){
print(i)
}
#another easy one
for(i in levels(dat$Size.class)){
print(i)
}
# can calculate something for each value of i ...can use to subset to groups of interest
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]))
}
# more complex:
# define a new vector or data frame outside the for loop first
new_vector = c() # it's empty
# also define a counter
x = 1
for(i in levels(dat$Size.class)){
new_vector[x] = mean(dat[dat$Size.class == i,"Mass"])
x = x+1 # add 1 to the counter (this will change the element of new_vector we access each loop)
}
#check it
new_vector
# PUT THIS TOGETHER WITH THE LEVELS OF OUR FACTOR SO WE HAVE A NEW DATA FRAME:
# FIRST COLUMN WILL BE THE FACTOR LEVELS....
# SECOND COLUMN WILL BE NAMED "MEAN" AND WILL BE VALUES FROM  new_vector
#fill it in
size_class_mean_mass = data.frame(...)
############ YOUR HOMEWORK ASSIGNMENT ##############
# 1.  Make a scatterplot of headwidth vs mass. See if you can get the points to be colored by "Colony"
dat = dat[dat$Colony == 1|2,]
plot(dat$Headwidth..mm., dat$Mass, col = dat$Colony)
dat = dat[dat$Colony == 1|dat$Colony == 2,]
plot(dat$Headwidth..mm., dat$Mass, col = dat$Colony)
# Assignment Week 3
# topics:   type conversions, factors, plot(), making a data frame from "scratch",
#           reordering,
list.files()
dat = read.csv("thatch_ant.csv")
names(dat)
#why are these plots different???
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
#check the classes of these vectors
class(dat$Headwidth..mm.)
class(dat$Size.class)
# plot() function behaves differently depending on classes of objects given to it!
# Check all classes (for each column in dat)
str(dat)
# Two of them are "Factor" ....why is the column "Headwidth" a factor? It looks numeric!
# we can try to coerce one format into another with a family of functions
# as.factor, as.matrix, as.data.frame, as.numeric, as.character, as.POSIXct, etc....
#make a numeric vector to play with:
nums = c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
# convert to a factor
as.factor(nums) # show in console
nums_factor = as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
#check it out
plot(nums)
plot(nums_factor)
# take note of how numeric vectors and factors behave differently in plot()
# Let's modify and save these plots. Why not!?
?plot()
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label")
?jpeg()
dev.off()
# back to our ant data...
dat$Headwidth
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
# I notice a couple weird ones in there: "" and "41mm"
# The "" means a missing value, basically. The "41mm" sure looks like a data entry error.
# It should probably be "41.000"
# FIND WHICH ONES HAVE "41mm"
# CONVERT THOSE TO "41.000"
# DO THE SAME FOR "", BUT CONVERT THOSE TO "NA"
# NOW, REMOVE ALL THE ROWS OF "dat" THAT HAVE AN "NA" VALUE
na.omit(dat)
# NOW, CONVERT THAT PESKY "Headwidth" COLUMN INTO A NUMERIC VECTOR WITHIN "dat"
# LET'S LEARN HOW TO MAKE A DATA FRAME FROM SCRATCH... WE JUST FEED IT VECTORS WITH NAMES!
# make some vectors *of equal length* (or you can pull these from existing vectors)
col1 = c("hat", "tie", "shoes", "bandana")
col2 = c(1,2,3,4)
col3 = factor(c(1,2,3,4)) # see how we can designate something as a factor
# here's the data frame command:
data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # colname = vector, colname = vector....
df1 = data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # assign to df1
df1 # look at it...note column names are what we gave it.
# Make a data frame from the first 20 rows of the ant data that only has "Colony" and "Mass"
# save it into an object called "dat3"
### for loops in R ###
#simplest example:
for(i in 1:10){
print(i)
}
#another easy one
for(i in levels(dat$Size.class)){
print(i)
}
# can calculate something for each value of i ...can use to subset to groups of interest
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]))
}
# more complex:
# define a new vector or data frame outside the for loop first
new_vector = c() # it's empty
# also define a counter
x = 1
for(i in levels(dat$Size.class)){
new_vector[x] = mean(dat[dat$Size.class == i,"Mass"])
x = x+1 # add 1 to the counter (this will change the element of new_vector we access each loop)
}
#check it
new_vector
# PUT THIS TOGETHER WITH THE LEVELS OF OUR FACTOR SO WE HAVE A NEW DATA FRAME:
# FIRST COLUMN WILL BE THE FACTOR LEVELS....
# SECOND COLUMN WILL BE NAMED "MEAN" AND WILL BE VALUES FROM  new_vector
#fill it in
size_class_mean_mass = data.frame(...)
############ YOUR HOMEWORK ASSIGNMENT ##############
# 1.  Make a scatterplot of headwidth vs mass. See if you can get the points to be colored by "Colony"
vector1 = c(1,2,3,4,5,6,7,8,9,10)
vector2 = c(5,6,7,8,4,3,2,1,3,10)
vector1*vector2
getwd()
rep("TTAGGG",2500)
paste0(rep("TTAGGG",2500))
rep = (rep("TTAGGG",2500))
paste0(rep)
write.csv(paste0(rep), "~/Desktop/rep.csv")
write.csv(paste(rep, sep = ""), "~/Desktop/rep.csv")
paste(rep, sep = "")
paste(rep, sep = ",")
rep = c(rep("TTAGGG",2500))
?write.csv()
new_vector = c() # it's empty
# also define a counter
x = 1
for(i in levels(dat$Size.class)){
new_vector[x] = mean(dat[dat$Size.class == i,"Mass"])
x = x+1 # add 1 to the counter (this will change the element of new_vector we access each loop)
}
#check it
new_vector
getwd
getwd()
vector1 = c(1,2,3,4,5,6,7,8,9,10)
vector2 = c(5,6,7,8,4,3,2,1,3,10)
vector1*vector2
vector1+1
vector1 = c(1,2,3,4,5,6,7,8,9,10)
vector2 = c(5,6,7,8,4,3,2,1,3,10,2)
vector1*vector2
vector1+c(1,2)
a = c("one","two","three")
b = c("four","five","six")
a+b
a*b
c(a,b)
?rep()
rep("a",10)
rep(a, 10)
1:10
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/data/")
list.files()
dat = read.csv("thatch_ant.csv")
names(dat)
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
plot(x=dat$Headwidth..mm., y=dat$Mass)
plot(x=dat$Size.class, y=dat$Mass)
class(dat$Headwidth..mm.)
class(dat$Size.class)
str(dat)
levels(dat$Headwidth)
nums = c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
as.factor(nums) # show in console
nums_factor = as.factor(nums) #assign it to a new object as a factor
nums_factor = as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
plot(nums)
plot(nums_factor)
plot(nums_factor,nums)
?plot()
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label")
plot(nums)
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label")
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label", col = "Blue")
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label", col = c(1,2,3))
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label", col = c(1,1,1,2,2,3))
?jpeg()
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label", col = c(1,1,1,2,2,3))
jpeg(filename = "~/Desktop/image.jpeg")
plot(nums, main = "My Title", xlab = "My axis label", ylab = "My other axis label", col = c(1,1,1,2,2,3))
dev.off()
?plot()
plot(nums, main = "My Title", xlab = "My axis label",
ylab = "My other axis label", col = c(1,1,1,2,2,3),
cex = 5)
pch()
plot(nums, main = "My Title", xlab = "My axis label",
ylab = "My other axis label", col = c(1,1,1,2,2,3),
cex = 5, pch = 21)
plot(nums, main = "My Title", xlab = "My axis label",
ylab = "My other axis label", col = c(1,1,1,2,2,3),
cex = 5, pch = 5)
plot(nums, main = "My Title", xlab = "My axis label",
ylab = "My other axis label", col = c(1,1,1,2,2,3),
cex = .5, pch = 5)
jpeg(filename = "~/Desktop/image.jpeg")
plot(nums, main = "My Title", xlab = "My axis label",
ylab = "My other axis label", col = c(1,1,1,2,2,3),
cex = .5, pch = 5)
dev.off()
dat$Headwidth
?jpeg
?dev.off()
dat$Headwidth
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
View(dat)
levels(dat$Headwidth) # levels gives all the "options" of a factor you feed it
dat$Headwidth == "41mm"
unique(dat$Headwidth == "41mm")
which(dat$Headwidth == "41mm")
which(dat$Headwidth == "41mm")
bad = which(dat$Headwidth == "41mm")
dat$Headwidth[bad]
dat$Headwidth[bad] = "41.000"
dat$Headwidth[bad] = 41.000
as.numeric(dat$Headwidth)
dat$Headwidth = as.numeric(dat$Headwidth)
class(dat$Headwidth)
plot(dat$Headwidth, dat$Mass)
plot(dat$Headwidth..mm., dat$Mass)
dat$Headwidth == ""
which(dat$Headwidth == "")
which(dat$Headwidth == NA)
View(dat)
summary(dat$Headwidth)
plot(dat$Headwidth)
summary(dat$Headwidth)
which(dat$Headwidth == 1)
bad = which(dat$Headwidth == 1)
dat$Headwidth[bad] = NA
na.omit(dat)
dat2 = na.omit(dat)
?read.csv()
col1 = c("hat", "tie", "shoes", "bandana")
col2 = c(1,2,3,4)
col3 = factor(c(1,2,3,4)) # see how we can designate something as a factor
data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # colname = vector, colname = vector....
df1 = data.frame(Clothes = col1, Numbers = col2, Factor_numbers = col3) # assign to df1
df1 # look at it...note column names are what we gave it.
?write.csv()
write.csv(dat2, file = "~/Desktop/clean_dat.csv", row.names = FALSE)
View(dat2)
for(i in 1:10){
print(i)
}
levels(dat$Size.class)
for(i in levels(dat$Size.class)){
print(i)
}
dat$Size.class == "<30","Mass"]
dat[dat$Size.class == "<30","Mass"]
for(i in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == i,"Mass"]))
}
levels(dat$Size.class)
for(shit in levels(dat$Size.class)){
print(mean(dat[dat$Size.class == shit,"Mass"]))
}
new_vector = c() # it's empty
x = 1
for(i in levels(dat$Size.class)){
new_vector[x] = mean(dat[dat$Size.class == i,"Mass"])
x = x+1 # add 1 to the counter (this will change the element of new_vector we access each loop)
}
new_vector
levels(dat$Size.class)
size_class_mean_mass = data.frame(Size_Class = levels(dat$Size.class),
Mean = new_vector)
View(size_class_mean_mass)
?data.frame()
View(dat2)
levels(dat$Size.class)
new_vector
cbind(levels(dat$Size.class), new_vector)
size_class_mean_mass = data.frame(Size_Class = levels(dat$Size.class),
Mean = new_vector*40)
size_class_mean_mass
