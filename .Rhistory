if(x$Final.Points[i] %in% c(480:539)){
x$Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
x$Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
x$Grade[i] <- "E"
}
}
}
biol1620_letter_grades(df.3)
View(df.3)
biol1620_letter_grades = function(x){   # give data frame object
x[,'Grade'] = "E"
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
x$Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
x$Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
x$Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
x$Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
x$Grade[i] <- "E"
}
}
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
biol1620_letter_grades
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
Grade
}
}
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
Grade
}
}
biol1620_letter_grades(df.3)
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
assign(letter.grades, Grade, envir = .GlobalEnv)
}
}
biol1620_letter_grades(df.3)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
assign(Grade, letter.grades, envir = .GlobalEnv)
}
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 13")
# ASSIGN LETTER GRADES
biol1620_letter_grades(df.3)
df.3$Grades <- letter.grades
row.names(df.3[Grades == "E",])
row.names(df.3[df.3$Grades == "E",])
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
# Assign letter grade function
biol1620_letter_grades = function(x){   # give data frame object
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= 600){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(540:599)){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(480:539)){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(400:479)){
Grade[i] <- "D"
}
if(x$Final.Points[i] < 400){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
x$Grades <- letter.grades
}
library(ggplot2)
plot_sec3 = ggplot(df.3, aes(x="Grade Distribution",y=Final.Points)) +
geom_violin(fill = "Green") +
geom_hline(aes(yintercept=400)) +
geom_hline(aes(yintercept=480)) +
geom_hline(aes(yintercept=540)) +
geom_hline(aes(yintercept=600)) +
theme_bw() + ggtitle("Final Score Distribution - Section 3")
plot_sec3 + annotate("text",x=1,y=650,label = "A: 9") +
annotate("text",x=1,y=570,label = "B: 9") +
annotate("text",x=1,y=510,label = "C: 4") +
annotate("text",x=1,y=450,label = "D: 5") +
annotate("text",x=1,y=200,label = "E: 12")
biol1620_letter_grades(df.3)
df.3$Grades <- letter.grades
row.names(df.3[df.3$Grades == "E",])
row.names(df.3[df.3$Grades == "D",])
row.names(df.3[df.3$Grades == "C",])
row.names(df.3[df.3$Grades == "B",])
row.names(df.3[df.3$Grades == "A",])
library(gzahn)
library(gzahn)
library(gzahn)
#Section 3
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
# df.3 = df.3[df.3$Final.Points > 100,]
hist(df.3$Final.Points, breaks = 10)
library(gzahn)
biol1620_letter_grades
biol1620_letter_grades(df.3)
library(gzahn)
biol1620_letter_grades(df.3)
library(gzahn)
df.3 = read.csv("~/Desktop/12_Dec_13_25_Grades-BIOL-1620.csv", header = TRUE, row.names = 1)
hist(df.3$Final.Points, breaks = 10)
library(gzahn)
biol1620_letter_grades(df.3)
library(geoff)
read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt")
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt")
read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
genus = read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
?strsplit
strsplit(spp, " ")
strsplit(spp, split = " ", fixed = TRUE)
strsplit(spp, split = "s", fixed = TRUE)
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt", stringsAsFactors = FALSE)
genus = read.csv("~/Desktop/Bioinformatics_Help/SIS_Fungal_Database_Coverage_genus.txt")
strsplit(spp, split = " ", fixed = TRUE)
View(spp)
spp = read.csv("~/Desktop/Bioinformatics_Help/SIS_spp_no_sp.txt", stringsAsFactors = FALSE, header = FALSE)
strsplit(spp$V1, split = " ", fixed = TRUE)
split = strsplit(spp$V1, split = " ", fixed = TRUE)
unlist(split)
sapply(split, "[[", 2)
sapply(split, "[[", 1)
spp_genus = sapply(split, "[[", 1)
unique(spp_genus)
spp_spp = sapply(split, "[[", 2)
data.frame(Genus = spp_genus, Species = spp_spp)
df = data.frame(Genus = spp_genus, Species = spp_spp)
View(df)
library(dplyr)
group_by(df, Genus)
group_by(df, Genus) %>%
sample_n(size=1)
df2 = group_by(df, Genus) %>%
sample_n(size=1)
write.csv(df2, "~/Desktop/Bioinformatics_Help/SIS_sparse_spp_names.txt")
View(df2)
write.csv(df2, "~/Desktop/Bioinformatics_Help/SIS_sparse_spp_names.txt", row.names = FALSE)
plot(dnorm, xlim=c(-4,4))
plot(dnorm)
plot(dnorm, xlim=c(-4,4))
plot(dbinom, xlim=c(-4,4))
data_course_letter_grades = function(x, a.cutoff = 700, b.cutoff = c(640,699), c.cutoff = c(560,639), d.cutoff = c(480,559)){   # give data frame object that has "Final.Points" column.
Grade = c()
for(i in 1:length(row.names(x))){
if(x$Final.Points[i] >= a.cutoff){
Grade[i] <- "A"
}
if(x$Final.Points[i] %in% c(b.cutoff[1]:b.cutoff[2])){
Grade[i] <- "B"
}
if(x$Final.Points[i] %in% c(c.cutoff[1]:c.cutoff[2])){
Grade[i] <- "C"
}
if(x$Final.Points[i] %in% c(d.cutoff[1]:d.cutoff[2])){
Grade[i] <- "D"
}
if(x$Final.Points[i] < d.cutoff[1]){
Grade[i] <- "E"
}
}
assign("letter.grades", Grade, envir = .GlobalEnv)
}
prompt(data_course_letter_grades)
getwd()
library(geoff)
library(gzahn)
observation = c(1:1000) # ordered numbers 1 to 1000
# define a random sampling function
samp = function(x){
x+(1+(3*rnorm(1)))
}
# set variable vector
wings = c()
# run random sampling function 1000 times
for(i in 1:1000){
wings[i] = samp(5)
}
# same as previous
velo = c()
for(i in 1:1000){
velo[i] = samp(15)
}
wingspan = wings
mass = (wingspan * (3+rnorm(1)))
velocity = velo
#ensure they are positive
wingspan = wingspan+22
mass=mass+41
velocity=velocity+5
df = as.data.frame(cbind(observation,wingspan,mass, velocity))
# look at fake data summary
summary(df)
View(df)
library(readr)
#look at working directory
getwd()
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/")
# Import dataset
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
cat(wingspan_vs_mass$mass, sep = "\n")
print("Wingspan",quote = FALSE)
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
print("Mass",quote = FALSE)
summary(wingspan_vs_mass$mass)[c(1,3,6)]
print("Slope of linear model fit",quote = FALSE)
fit$coefficients[2]
#Repeat the Excel analysis in R
#Load package(s)
library(readr)
#look at working directory
getwd()
#set new working directory
setwd("~/Desktop/GIT_REPOSITORIES/Data_Course/")
# Import dataset
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
# Plot wingspan vs mass and save to file
jpeg("./output/scatterplot.jpg")
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
dev.off()
# Get linear model fit
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
# Print a file that contains the measured mass values, ordered from highest to lowest (one value per line)
sink("./output/mass_ordered.txt")
cat(wingspan_vs_mass$mass, sep = "\n")
sink(NULL)
# Print a file that has the slope of our linear model fit (cofficient of mass for linear model)
# along with summary stats for each variable
sink("./output/summary_and_slope.txt")
print("Wingspan",quote = FALSE)
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
print("Mass",quote = FALSE)
summary(wingspan_vs_mass$mass)[c(1,3,6)]
print("Slope of linear model fit",quote = FALSE)
fit$coefficients[2]
sink(NULL)
wingspan_vs_mass <- read_csv("./data/wingspan_vs_mass.csv", col_types = cols(X1 = col_skip()))[1:500,]
# Sort by mass (decreasing)
wingspan_vs_mass = wingspan_vs_mass[order(wingspan_vs_mass$mass, decreasing = TRUE),]
# Summarize wingspan and mass values to get min, mean, max
summary(wingspan_vs_mass$wingspan)[c(1,3,6)]
summary(wingspan_vs_mass$mass)[c(1,3,6)]
# Plot wingspan vs mass and save to file
jpeg("./output/scatterplot.jpg")
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
dev.off()
# Get linear model fit
fit = lm(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass)
# Get slope (coefficient of mass)
fit$coefficients[2]
# Print a file that contains the measured mass values, ordered from highest to lowest (one value per line)
plot(wingspan_vs_mass$wingspan ~ wingspan_vs_mass$mass, xlab="Mass",ylab="Wingspan")
